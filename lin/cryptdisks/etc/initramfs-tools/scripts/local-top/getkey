#!/bin/sh

PREREQ="udev"
EXCEPT_DEVLIST=$(/sbin/blkid -o device -t TYPE=crypto_LUKS | tr '\n' ' ')

prereqs()
{
    echo "$PREREQ"
}

case $1 in
    # get pre-requisites
    prereqs)
	prereqs
	exit 0
	;;
esac

. /scripts/functions

get_key_from_fs()
{
    local mpoint="/flash"
    mkdir -p $mpoint

    wait_for_udev 10
    for dev in $(/sbin/blkid -o device); do
	#skip if dev already in EXCEPT_DEVLIST
	case " $EXCEPT_DEVLIST " in
	    *\ $dev\ *) continue;
	esac
        FSTYPE=$(get_fstype $dev);
        if mount -o ro -t $FSTYPE $dev $mpoint > /dev/null 2>&1; then
            if [ -s "$mpoint/$MYKEY" ]; then
                cat "$mpoint/$MYKEY" > "$KEYFILE"
            fi
            umount $dev >/dev/null 2>&1
	else
	    EXCEPT_DEVLIST="$EXCEPT_DEVLIST $dev"
        fi;
        [ -s "$KEYFILE" ] && return 0
    done;
    return 1
}

get_device()
{
    if [ -n "${BOOTIF}" ]; then
            # pxelinux sets BOOTIF to a value based on the mac address of the
            # network card used to PXE boot, so use this value for DEVICE rather
            # than a hard-coded device name from initramfs.conf. this facilitates
            # network booting when machines may have multiple network cards.
            # pxelinux sets BOOTIF to 01-$mac_address
            # strip off the leading "01-", which isn't part of the mac
            # address
            temp_mac=${BOOTIF#*-}
            # convert to typical mac address format by replacing "-" with ":"
            bootif_mac=$(echo "$temp_mac" | tr '-' ':')
            # look for devices with matching mac address, and set DEVICE to
            # appropriate value if match is found.
            for device in /sys/class/net/* ; do
                    if [ -f "$device/address" ]; then
                            current_mac=$(cat "$device/address")
                            if [ "$bootif_mac" = "$current_mac" ]; then
                                    DEVICE=${device##*/}
				    DEVICE6=${device##*/}
                                    break
                            fi
                    fi
            done
    fi
}


update_ip_param()
{
    get_device
    IP=$(echo $IP | sed "s/[^:]*:/$DEVICE:/6")
}

update_resolv_conf()
{
    local resolv_conf=/etc/resolv.conf
    local n="" ns="" search=""
    local rconf="" CR="\n"

    rconf=$(cat $resolv_conf 2>/dev/null)
    ns="$(echo -e "$rconf" | sed -nr 's/nameserver[[:space:]]+(.+)/\1/p' | tr '\n' ' ')"
    for n in $DNS "${IPV4DNS0}" "${IPV4DNS1}" "${IPV6DNS0}" "${IPV6DNS1}"; do
	[ -n "$n" -a "$n" != "0.0.0.0" ] || continue
        # skip if 'n' already in list.
	case " $ns " in
	    *\ $n\ *) continue;
	esac
        ns="${ns} ${n}"
    done;

    search="$(echo -e "$rconf" | sed -nr 's/search[[:space:]]+(.+)/\1/p' | tr '\n*' ' ')"
    for n in $SEARCH ${DOMAINSEARCH} ${IPV6DOMAINSEARCH}; do
        [ -n "$n" ] || continue
        # skip if 'n' already in search.
	case " $search " in
	    *\ $n\ *) continue;
	esac
        search="$search $n"
    done;
    search=${search# }
    ns=${ns# }
    rconf=""
    for n in ${ns}; do
	rconf="${rconf}nameserver $n${CR}"
    done
    
    if [ -n "${search}" ]; then
	rconf="${rconf}search ${search}${CR}"
    fi
    if [ -z "$rconf" ]; then
        echo "no search or nameservers found" 1>&2
    fi
    if [ "$rconf" = "-" ]; then
        echo -e "$rconf"
    else
        echo -e "$rconf" > "$resolv_conf"
    fi
}

get_key_from_net()
{
    [ -z "$IP" ] && return 1
    update_ip_param
    configure_networking
    update_resolv_conf
    wait_for_udev 10
    if [ ! -s "$KEYFILE" ]; then
        /sbin/ssh -q -o StrictHostKeyChecking=no -o ConnectTimeout=10 $USERSERV "cat ~/$MYKEY" > "$KEYFILE"
    fi
    if [ -s "$KEYFILE" ]; then
	return 0
    fi;
    return 1;
}

get_key()
{
    get_key_from_fs && return 0
    get_key_from_net && return 0
    return 1
}

main()
{
    while ! get_key; do
	sleep 10;
    done;
}

main


